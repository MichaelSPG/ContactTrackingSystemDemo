@using ContactTrackingSystem.Shared.Filtering;
@typeparam TItem

<div class="mb-3">
    <div>
        <div>
            <div class="">
                <a class="m-2" href="javascript:void(0);" @onclick="() => ShowActiveFilters = !ShowActiveFilters">
                    <i class="fa-solid @(!ShowActiveFilters ? "fa-angles-down" : "fa-angles-up") text-primary"> </i>
                    <span class="ms-3"><i class=" fa-solid fa-filter me-2"></i>Filters</span>
                    <span class="ms-1">(@this.FilterLinkedList.Count)</span>
                </a>
            </div>
        </div>
        <hr />
        @if (ShowActiveFilters)
        {
            <div class="card">
                <div class="card-body d-flex justify-content-between align-items-center">
                    <div id="filterElements" class="">
                        @foreach (var filter in this.FilterLinkedList)
                        {

                            @if (filter != FilterLinkedList.First.Value)
                            {
                                <a class="bg-transparent @(FindFilterNode(filter).Previous.Value.ConnectorType.Value == ConnectorType.And ? "text-success" : "text-warning " )"
                       href="javascript:void(0);" @onclick="()=> SwapConnectorType(filter)">
                                    <strong>@ConnectionTypeMapping.GetString(FindFilterNode(filter).Previous.Value.ConnectorType.Value)</strong>
                                </a>
                            }
                            <div class="badge border rounded-pill bg-light p-2 m-2">
                                <span><a class="m-2 text-danger" href="javascript:void(0);" @onclick="()=> RemoveFilter(filter)"><i class="fa-solid fa-xmark"></i></a></span>
                                <a href="javascript:void(0)" class="link-secondary" @onclick="()=> ShowFilterConfigMenu(filter)">
                                    <span>Column</span>
                                    <strong>@filter.Source</strong>
                                    <span>@FilterTypeMapping.GetString(filter.FilterType.Value)</span>
                                    <span>'<i>@filter.Value</i>'</span>
                                </a>
                            </div>
                        }
                    </div>

                    @if (!this.FilterLinkedList.Any())
                    {
                        <span class="text-muted">No filters applied</span>

                    }
                    <button @onclick="()=> ShowFilterConfigMenu()" class="badge border rounded-pill bg-success p-2">Add</button>
                </div>
            </div>
        }

        @*        <button name="Filters" class="btn btn-info"></button>*@
        @if (ShowFiltersMenu)
        {
            <EditForm Model="@CurrentFilter" OnValidSubmit="() => AddEditFilter(CurrentFilter, ConnectorType.And)">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="card position-absolute" style="z-index:100;">
                    <div class="mt-2 col d-flex justify-content-between">
                        <h3 class="m-2">@(IsNewFilter ? "New" : "Edit") filter</h3>
                        <button class="btn btn-outline-danger" type="button" @onclick="()=> HideNewFilterMenu()">
                            &times;
                        </button>
                    </div>
                    <hr />
                    <div class="card-body">

                        <div class="d-grid gap-3">

                            <div class="col">
                                <span>Source</span>
                                <InputSelect class="form-select" placeholder="Source" @bind-Value="@CurrentFilter.Source">
                                    <option value="">---</option>
                                    <option value="All">All</option>
                                    @foreach (var col in Columns)
                                    {
                                        <option value="@col?.PropertyName">@col?.Name</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="() => CurrentFilter.Source"></ValidationMessage>
                            </div>
                            <div class="col">
                                <span>Operation</span>
                                <InputSelect class="form-select" @bind-Value="@CurrentFilter.FilterType">
                                    <option value="">---</option>
                                    @foreach (var key in FilterTypeMapping.GetMapping().Keys)
                                    {
                                        <option value="@key">@FilterTypeMapping.GetString(key)</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="() => CurrentFilter.FilterType"></ValidationMessage>
                            </div>
                            <div class="col-12">
                                <span>Value</span>

                                <InputText placeholder="Value" class="form-control" type="text" @bind-Value=@CurrentFilter.Value />
                                <ValidationMessage For="() => CurrentFilter.Value"></ValidationMessage>

                            </div>
                            <div class="col-12">
                                <span>Match case</span>

                                <InputCheckbox placeholder="Match case" class="form-check" type="text" @bind-Value=@CurrentFilter.MatchCase />
                                <ValidationMessage For="() => CurrentFilter.MatchCase"></ValidationMessage>

                            </div>
                            <div class="col-12">
                                <span>@FilterMessage</span>
                            </div>
                        </div>
                        <hr />
                        <span class="input-group-append d-flex justify-content-between">
                            <button class="btn btn-outline-secondary" type="button" @onclick="()=> HideNewFilterMenu()">
                                Cancel
                            </button>
                            <button class="btn btn-outline-primary" type="submit">
                                <i class="fa-solid @(IsNewFilter ? "fa-plus" : "fa-pen-to-square")"></i> @(IsNewFilter ? "Add" : "Edit")
                            </button>

                        </span>
                    </div>
                </div>
            </EditForm>
        }


    </div>
</div>
<div class="p-0 card container-fluid">
@*    <table class="m-0 table table-striped table-hover table-responsive-lg ">

       
        
    </table>*@
    <div style="overflow-x:auto;" class="p-2">
        <table class="table table-hover">
            <thead class="bg-light rounded-1">
                <tr>
                    <th scope="col">#</th>
                    @foreach (var column in Columns)
                    {
                        <th scope="col">
                            <div class="d-flex justify-content-between align-items-center" style="color:#65676c;">
                                <div>
                                    @column.Name
                                </div>
                                <div class="me-3 d-flex align-items-center">
                                    @if (column.Focused)
                                    {
                                        <a href="javascript:void(0);" @onclick="() => OrderByColumn(column)"><i class="fa-solid fa-sort-@(column.OrderDesc ? "up" : "down")"></i></a>
                                    }
                                    else
                                    {
                                        <a href="javascript:void(0);" @onclick="() => OrderByColumn(column)"><i class="fa-solid fa-sort"></i></a>
                                    }
                                </div>

                            </div>
                        </th>
                    }
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            
            <tbody>

                @foreach (var item in FilteredItems.Skip(ItemsPerPage * CurrentPage).Take(ItemsPerPage <= 0 ? FilteredItems.Count : ItemsPerPage).ToList())
                {
                    <tr>
                        <th scope="row">@(FilteredItems.IndexOf(item) + 1)</th>
                        @foreach (var column in Columns)
                        {
                            <td scope="col">@GetValueOfItem(item, column.PropertyName)?.ToString()</td>
                        }
                        <td scope="col">
                            <a href="javascript:void(0);" @onclick="async ()=> await CallEditItem(item)" class="text-success"><i class="fa-solid p-2 fa-pen-to-square me-1"></i></a>
                            <a href="javascript:void(0);" @onclick="async ()=> await CallRemoveItem(item)" class="text-danger"><i class="fa-solid p-2 fa-trash me-1"></i></a>
                        </td>
                    </tr>
                }
                @if (FilteredItems.Count <= 0)
                {
                    <tr>
                        <th scope="col" colspan="@(Columns.Count+2)" style="text-align:center;" class="p-3">No items to display (empty)</th>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<div class="card">
    <div class="card-body d-flex justify-content-between align-items-center">
        <div class="d-flex  align-items-center">
            <label class="text-muted me-4">Page @(CurrentPage + 1) of @MaxPages (@FilteredItems.Count items)</label>
            @foreach (var item in Enumerable.Range(0, MaxPages))
            {
                <div class="me-2">
                    @if (item == CurrentPage)
                    {
                        <strong class="bg-primary paginator-page text-white">@(item + 1)</strong>
                    }
                    else
                    {
                        <a class="paginator-page border border-primary" href="javascript:void(0)" @onclick="() => CurrentPage = item">@(item + 1)</a>
                    }
                </div>
            }
        </div>
        <label class="text-muted me-4">Total @Items.Count items</label>
    </div>
</div>
@code {

}
